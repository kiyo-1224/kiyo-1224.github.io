<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringMVC on 忆遇惜·真白 的个人博客</title>
    <link>https://kiyo-1224.github.io/tags/springmvc/</link>
    <description>Recent content in SpringMVC on 忆遇惜·真白 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jun 2022 01:10:00 +0800</lastBuildDate><atom:link href="https://kiyo-1224.github.io/tags/springmvc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringMVC_RequestMapping 注解</title>
      <link>https://kiyo-1224.github.io/posts/springmvc1/</link>
      <pubDate>Wed, 22 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc1/</guid>
      <description>环境搭建 第一步导入相关依赖，并设置打包方式为 war 第二步在工程中添加 web 模块，并在配置文件中配置前端控制器 第三步在配置文件中配置 thymeleaf 和 注解扫描 第四步在 WEB-INF 下创建 temlates 目录然后在该目录创建 index.html 并在页面中引入 thymeleaf 命名空间 第五步创建控制器 最后启动 Tomcat 访问
@RequestMapping 注解 @RequestMapping 注解的功能 @RequestMapping 注解的作用是将请求和处理请求的控制器方法关联起来，建立映射关系，SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求
@RequestMapping 注解的位置 @RequestMapping 标识一个类：设置映射请求的请求路径的初始信息
@RequestMapping 标识一个方法：设计映射请求的请求路径的具体信息
@RequestMapping 注解的 value 属性 @RequestMapping 注解的 value 属性通过请求的请求地址匹配请求映射
@RequestMapping 注解的 value 属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求
@RequestMapping 注解的 value 属性必须设置
@RequestMapping 注解的 method 属性 @RequestMapping 注解的 method 属性通过请求的请求方式 (get 或 post) 匹配请求
@RequestMapping 注解的 method 属性是一个 RequestMethod 类型的数组，表示该请求能够匹配多种请求方式的请求</description>
    </item>
    
    <item>
      <title>SpringMVC获取请求参数</title>
      <link>https://kiyo-1224.github.io/posts/springmvc2/</link>
      <pubDate>Wed, 22 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc2/</guid>
      <description>SpringMVC获取请求参数 通过 servletAPI 获取 将 HttpServletRquest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文对象 例： 通过控制器方法的形参获取参数 在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DisPathcherServlet 中就会将请求参数赋值给相应的形参
例： 若：
请求参数所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串或字符串数组类型的形参接收此请求参数 若使用字符串数组类型的形参，此参数的数组中包含了每一个数据 若使用字符串类型的参数，此参数的值为每个数据中间使用逗号拼接的结果
@RequestParam @RequestParam 是将请求参数和控制器方法的形参创建映射关系
@RequestParam 注解一共有三个属性：
value：指定为形参赋值的请求参数名
required：指定为形参赋值的请求参数的参数名，默认为 true
若设置为 true 时，则当前请求必须传递 value 所指定的请求参数，若没有传输请求参数，且没有设置 defaultValue 属性，则页面报错 400；
若设置为 false，则当前请求不是必须传输 value 所指定的请求传输，若没有传输，则注解标识的形参的值为 null
defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输时，则使用默认形参为形参赋值
例： @RequestHeader @RequestHeader 是将请求头信息和控制器方法的形参创建映射关系 @RequestHeader 注解一共有三个属性：value、required、defaultValue,用法和 @RequestParam 相同
@CookieValue @CookieValue 是将 cookie 数据属性和控制器方法的形参创建映射关系 @CookieValue 注解一共有三个属性：value、required、defaultValue,用法和 @RequestParam 相同
通过 POJO 获取数据 可以在控制器方法的形参位置设计一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值
处理请求参数乱码的问题 解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 CharacterEncodingFilter，但是必须在 web.</description>
    </item>
    
  </channel>
</rss>
