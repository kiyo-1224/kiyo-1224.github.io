<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SSM on 忆遇惜·真白 的个人博客</title>
    <link>https://kiyo-1224.github.io/categories/ssm/</link>
    <description>Recent content in SSM on 忆遇惜·真白 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Jun 2022 01:20:00 +0800</lastBuildDate><atom:link href="https://kiyo-1224.github.io/categories/ssm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringMVC执行流程</title>
      <link>https://kiyo-1224.github.io/posts/springmvc6/</link>
      <pubDate>Fri, 24 Jun 2022 01:20:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc6/</guid>
      <description>SpringMVC执行流程 SpringMVC 常用组件  DispatcherServlet：前端控制器，不需要工程师开发，由框架提供 作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求 HandlerMapping：处理映射器，不需要工程师开发，由框架提供 作用：根据请求的 url、method 等信息查找 Handler，即控制器方法 Handler：处理器，需要工程师开发 作用：在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理 HandlerAdapter：处理器适配器，不需要工程师开发，由框架提供 作用：通过 HandlerAdapter 对处理器(控制器方法) 进行执行 ViewResolver：视图解析器，不需要工程师开发，由框架提供 作用：进行视图解析，得到相应的视图 View：视图，不需要工程师开发，由框架提供 作用：将模型数据通过页面展示给用户  4、SpringMVC的执行流程   用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。
  DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：
  a) 不存在
i. 再判断是否配置了mvc:default-servlet-handler
ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误
iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误
b) 存在则执行下面的流程
 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。
  DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。
  如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】
  提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：
  a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息
b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等
c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</description>
    </item>
    
    <item>
      <title>拦截器和异常处理器</title>
      <link>https://kiyo-1224.github.io/posts/springmvc7/</link>
      <pubDate>Fri, 24 Jun 2022 01:11:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc7/</guid>
      <description>拦截器 拦截器的配置 SpringMVC 的拦截器用于拦截控制器方法的执行
SpringMVC 的拦截器需要实现 HandlerInterceptor 或者继承 HandlerInterceptorAdaoter 类
SpringMVC 的拦截器必须在 SpringMVC 文件中配置
拦截器的三个抽象方法 SpringMVC 的拦截器有三个抽象方法
preHandle：控制器方法执行前执行 preHandle，其 boolean 类型的返回值表示其是否拦截或放行，返回 true 放行，即调用控制器方法，返回 false 拦截，即不调用控制器方法
postHandle：控制器方法执行之后执行 postHandle
afterComplation：处理完视图和模型数据，渲染视图完毕后执行 afterComplation
多个拦截器的执行顺序 若每个拦截器的 preHandle 都返回 true
此时多个拦截器的执行顺序和拦截器在 SpringMVC 配置文件的配置顺序有关
preHandle 会按照配置的顺序执行，而 postHandle 和 afterComplation 按配置倒序执行
若每个拦截器的 preHandle 都返回 false
preHandle 返回 false 和它之前的拦截器 preHandle 都会执行，postHandle 不执行，返回 false 的拦截器之前的拦截器的 afterComplation 会执行
异常处理器 基于配置的异常处理 SpringMVC 提供了一个控制处理器方法处理执行过程中所出现的所有异常的接口：HandlerExceptionResolver
HandlerExceptionResolver 接口的实现类有：
DefaultHandlerExceptionResolver 和 SimpleMappingExceptionResolver
SpringMVC 提供了自定义的异常处理器 SimpleMappingExceptionResolver</description>
    </item>
    
    <item>
      <title>HttpMessageConverte</title>
      <link>https://kiyo-1224.github.io/posts/springmvc5/</link>
      <pubDate>Fri, 24 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc5/</guid>
      <description>HttpMessageConverter HttpMessageConverter 报文信息转换器，将请求报文转换为 Java 对象，或将 Java 对象转换为响应报文
HttpMessageConverter 提供了两个注解和两个类型： @RequestBody、@ResponseBody、RequestEntity、ResponesEntity
@RequestBody @RequestBody 可以获取请求体，需要在控制器方法设置一个形参，使用 @RequestBody 进行标识，当前请求的请求体就会为当前注解所标识的形参赋值
例： 如输入中文乱码，可在表单添加 enctype=&amp;ldquo;text/plain&amp;rdquo;
RequestEntity RequestEntity 封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过 getHeaders() 获取请求头信息，通过 getBody() 获取请求体信息
例： @ResponseBody @ResponseBody 用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器
使用原生API 例： 如果中文乱码使用 response.setContentType(&amp;ldquo;text/html;charset=UTF-8&amp;rdquo;) 语句设置编码
使用 @ResponseBody 例： @ResponseBody 处理 json @ResponseBody 处理 json 的步骤 首先需要导入相关依赖，然后在 SpringMVC 配置文件中开启 MVC 注解驱动
在控制器方法上使用 @ResponseBody 进行标识 将 Java 对象直接作为控制器方法的返回值返回，就会自动转换为 json 格式的字符串
例： 处理 AJAX 请求超链接： 通过 vue 和 axios 处理点击事件： 控制器： @RestController @RestController 注解是 SpringMVC 提供的一个复合注解，标识在控制器的类上，就相当于为类添加了 @Controller 注解，并且为其中的每个方法添加了 @ResponseBody 注解</description>
    </item>
    
    <item>
      <title>SpringMVC RESTFul</title>
      <link>https://kiyo-1224.github.io/posts/springmvc4/</link>
      <pubDate>Thu, 23 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc4/</guid>
      <description>RESTFul RESTFul 简介 REST：Representational State Transfer,表现层资源状态转移
资源：
资源是一种看待服务器的方式。即，将服务器看作是由很多离散的资源组成，每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象概念，所以它不仅仅能代表服务器文件系统中的一个文件，数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个 URI 来标识。URI即是资源的名称，也是资源在 web 上的地址。对某个资源感兴趣的客户端应用，可以通过资源的 URI 与其进行交互
资源的表述：
资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移(交换)。资源的表述可以有多种格式，如HTML/XML/JSON/纯文本/图片/视频/音频等等。资源的表述可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式
状态转移：
状态转移说的是：在客户端和服务器之间转移(transfer)代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的
RESTFul 的实现 具体的说，就是 HTTP 协议里，四个表示操作方式的动词：GET、POST、PUT、DELETE
分别对应四种基本操作：获取资源，新建资源，更新资源，删除资源
REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性 HiddenHttpMethodFilter 需要先在 web.xml 下进行配置，注意此过滤器需要在字符编码过滤器之后，因为在设置编码之前一旦获取了任何请求参数，设置编码将没有任何效果 以 put 请求为例: RESTFul 案例 注意如果需要使用静态资源，需要在 SpringMVC 的配置文件中开启对静态资源的访问 查： 删： 改： 增： 页面：
user主页面 user添加页面 user更改界面 </description>
    </item>
    
    <item>
      <title>域对象共享数据和SpringMVC的视图</title>
      <link>https://kiyo-1224.github.io/posts/springmvc3/</link>
      <pubDate>Thu, 23 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc3/</guid>
      <description>域对象共享数据 使用 servlet 向 request 域对象共享数据 例： 使用 ModelAndView 向request 域共享对象 使用 ModelAndView 此方法必须以 modelAndView 为返回值类型
例： 使用 Model 向 request 域对象共享数据 需要在形参中创建 Model 类型的形参
例： 使用 map 向 request 域对象共享数据 需要在形参中创建 Map 类型的形参
例： 使用 ModelMap 向 request 域对象共享数据 需要在形参中创建 ModelMap 类型的形参
例： Model、ModelMap、Map 的关系 Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型 向 session 域共享数据 对于 session 更加推荐使用 servlet 原生 API
例： 向 application 域共享数据 例： SpringMVC的视图 SpringMVC 中的视图是 view 接口，视图的作用是渲染数据，将模型 Model 中的数据展示给用户</description>
    </item>
    
    <item>
      <title>RequestMapping 注解</title>
      <link>https://kiyo-1224.github.io/posts/springmvc1/</link>
      <pubDate>Wed, 22 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc1/</guid>
      <description>环境搭建 第一步导入相关依赖，并设置打包方式为 war 第二步在工程中添加 web 模块，并在配置文件中配置前端控制器 第三步在配置文件中配置 thymeleaf 和 注解扫描 第四步在 WEB-INF 下创建 temlates 目录然后在该目录创建 index.html 并在页面中引入 thymeleaf 命名空间 第五步创建控制器 最后启动 Tomcat 访问
@RequestMapping 注解 @RequestMapping 注解的功能 @RequestMapping 注解的作用是将请求和处理请求的控制器方法关联起来，建立映射关系，SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求
@RequestMapping 注解的位置 @RequestMapping 标识一个类：设置映射请求的请求路径的初始信息
@RequestMapping 标识一个方法：设计映射请求的请求路径的具体信息
@RequestMapping 注解的 value 属性 @RequestMapping 注解的 value 属性通过请求的请求地址匹配请求映射
@RequestMapping 注解的 value 属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求
@RequestMapping 注解的 value 属性必须设置
@RequestMapping 注解的 method 属性 @RequestMapping 注解的 method 属性通过请求的请求方式 (get 或 post) 匹配请求
@RequestMapping 注解的 method 属性是一个 RequestMethod 类型的数组，表示该请求能够匹配多种请求方式的请求</description>
    </item>
    
    <item>
      <title>SpringMVC获取请求参数</title>
      <link>https://kiyo-1224.github.io/posts/springmvc2/</link>
      <pubDate>Wed, 22 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/springmvc2/</guid>
      <description>SpringMVC获取请求参数 通过 servletAPI 获取 将 HttpServletRquest 作为控制器方法的形参，此时 HttpServletRequest 类型的参数表示封装了当前请求的请求报文对象 例： 通过控制器方法的形参获取参数 在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在 DisPathcherServlet 中就会将请求参数赋值给相应的形参
例： 若：
请求参数所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串或字符串数组类型的形参接收此请求参数 若使用字符串数组类型的形参，此参数的数组中包含了每一个数据 若使用字符串类型的参数，此参数的值为每个数据中间使用逗号拼接的结果
@RequestParam @RequestParam 是将请求参数和控制器方法的形参创建映射关系
@RequestParam 注解一共有三个属性：
value：指定为形参赋值的请求参数名
required：指定为形参赋值的请求参数的参数名，默认为 true
若设置为 true 时，则当前请求必须传递 value 所指定的请求参数，若没有传输请求参数，且没有设置 defaultValue 属性，则页面报错 400；
若设置为 false，则当前请求不是必须传输 value 所指定的请求传输，若没有传输，则注解标识的形参的值为 null
defaultValue：不管 required 属性值为 true 或 false，当 value 所指定的请求参数没有传输时，则使用默认形参为形参赋值
例： @RequestHeader @RequestHeader 是将请求头信息和控制器方法的形参创建映射关系 @RequestHeader 注解一共有三个属性：value、required、defaultValue,用法和 @RequestParam 相同
@CookieValue @CookieValue 是将 cookie 数据属性和控制器方法的形参创建映射关系 @CookieValue 注解一共有三个属性：value、required、defaultValue,用法和 @RequestParam 相同
通过 POJO 获取数据 可以在控制器方法的形参位置设计一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值
处理请求参数乱码的问题 解决获取请求参数的乱码问题，可以使用 SpringMVC 提供的编码过滤器 CharacterEncodingFilter，但是必须在 web.</description>
    </item>
    
    <item>
      <title>JdbcTemplate和事务操作</title>
      <link>https://kiyo-1224.github.io/posts/jdbctemplate/</link>
      <pubDate>Fri, 17 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/jdbctemplate/</guid>
      <description>JdbcTemplate和事务操作 JdbcTemplate JdbcTemplate(概念和准备) 概念：
JdbcTemplate Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作
准备工资 导入相关依赖
 &amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.2.9&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;8.0.29&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;5.3.20&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;5.3.20&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-orm&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;4.3.21.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
 配置数据库连接池 配置 JBDCTemplate 对象，注入 DataSource 创建 service、dao类,在 dao 注入 JDBCTemplate 对象 ，并且在配置文件中开启组件扫描
JdbcTeplate 操作数据库 首先创建相应的实体类，随后在service Dao类中添加相应的方法，最后使用测试类进行测试 例： 增删改使用 jdbcTemplate 中的 update 方法 查询使用 queryForObject 或 query 方法
对于返回对象或集合的查询，需要使用其重载的方法，其参数为： (sql语句，RowMapper&amp;lt;T&amp;gt;,sql语句值)
其中 RowMapper 是接口，针对返回不同类型数据，使用此接口的实现类完成数据封装</description>
    </item>
    
    <item>
      <title>AOP</title>
      <link>https://kiyo-1224.github.io/posts/aop/</link>
      <pubDate>Fri, 10 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/aop/</guid>
      <description>AOP(面向切面编程) 什么是AOP: 面向切面编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率（即不通过修改源代码方式，在主干功能里添加新功能）
AOP底层原理：
 有接口,使用 JDK 动态代理。创建接口实现类代理对象，增强类的方法 无接口,使用 CGLIB 动态代理。创建子类的代理对象，增强类的方法  AOP(JDK 动态代理) 使用 JDK 动态代理，需要使用 Proxy 类里面的方法创建代理对象
代理类 需要实现 InvocationHandler 接口，首先使用有参构造传递需要代理的对象，然后在 invoke 方法中编写增强的逻辑 例： 编写完代理类后，使用 newProxyInstance 启用代理， 此方法有三个参数 第一个参数：类加载器 第二个参数：增强方法所在的类，这个类的接口，支持多个接口 第三个参数：代理类对象 例： AOP(操作术语) 连接点：类里面哪些方法可以被增强，这些方法被称为连接点
切入点：实际被增强的方法，称为切入点
通知(增强)：实际增强的逻辑部分称为通知(增强) 通知有多种类型：前置通知、后置通知、环绕通知、异常通知、最终通知
切面：是动作，把通知应用到切入点的过程
AOP操作 Spring 框架一般是基于 AspectJ 实现 AOP 操作
AspectJ：AspectJ 不是 Spring 组成部分，是一个独立的 AOP 框架，一般和 Spring 一起使用，进行 AOP 操作
基于 AspectJ 实现 AOP 操作有两种 1.基于 xml 配置文件实现 2.基于注解方式实现
需要在工程项目中引入 AOP 相关依赖
 &amp;lt;dependency&amp;gt;</description>
    </item>
    
    <item>
      <title>IOC容器</title>
      <link>https://kiyo-1224.github.io/posts/ioc/</link>
      <pubDate>Fri, 10 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224.github.io/posts/ioc/</guid>
      <description>IOC的概念 IOC(控制反转)，把对象创建和对象之间的调用过程，交给Spring进行管理，其目的为降低耦合度
IOC底层使用：xml解析、工厂模式、反射
 IOC接口(BeanFactory) Spring 提供IOC容器实现方式有两种：
 BeanFactory：IOC容器基本实现，是spring内部使用的接口，加载配置文件时不会创建对象，在获取对象才去创建 ApplicationContext：BeanFactory接口的子接口，提供更多的功能，加载文件时就会创建对象  ApplicationContext实现类：
 FileSystemXmlApplicationContext :读取文件绝对路径 ClassPathXmlApplicationContext	:读取文件类路径  通常使用 ApplicationContext 接口来获取配置文件 例：
 ApplicationContext context =
new ClassPathXmlApplicationContext(&amp;ldquo;bean.xml&amp;rdquo;);
  IOC操作Bean管理(基于xml) Bean管理指的是两个操作：1.Spring创建对象 2.Spring注入属性
 1.基于xml配置文件实现 在Spring配置文件中使用bean标签，标签里添加对应属性，就可以实现对象创建
bean标签常用属性
 id 属性：唯一标识 class 属性：类全路径   &amp;lt;bean id=&amp;ldquo;user&amp;rdquo; class=&amp;ldquo;pojo.user&amp;rdquo;&amp;gt; &amp;lt;/bean&amp;gt;
 创建对象时，默认执行无参构造方法完成对象的创建
使用 getBean 方法获取对象，其形参列表为(id值，类)
 User user = context.getBean(&amp;ldquo;user&amp;rdquo;,User.class)
  2.基于xml注入属性 DI：依赖注入，即注入属性
 name 填入属性名 使用set方法注入，在&amp;lt;bean&amp;gt;标签中使用&amp;lt;property&amp;gt;，配置属性注入 使用有参构造方法注入,在&amp;lt;bean&amp;gt;标签中使用&amp;lt;constructor-arg&amp;gt;，配置属性注入  set 方法注入</description>
    </item>
    
  </channel>
</rss>
