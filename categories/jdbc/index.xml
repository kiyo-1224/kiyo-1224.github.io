<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JDBC on 忆遇惜·真白 的个人博客</title>
    <link>http://example.org/categories/jdbc/</link>
    <description>Recent content in JDBC on 忆遇惜·真白 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 18 Jun 2022 01:10:00 +0800</lastBuildDate><atom:link href="http://example.org/categories/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JDBC概述和获取数据库连接</title>
      <link>http://example.org/posts/jdbc1/</link>
      <pubDate>Sat, 18 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>http://example.org/posts/jdbc1/</guid>
      <description>JDBC概述 持久化 Java中的数据存储技术 在Java中，数据库存取技术可分为如下几类：
 JDBC 直接访问数据库 JDO(Java Data Object)技术 第三方O/R工具，如Hibernate、MyBatis等 JDBC是Java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC  JDBC介绍  JDBC(Java DataBase Connectivity)是一个独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口(一组API)，定义了用来访问数据库的标准Java类库，(java.sql,javax.sql) 使用这些类库可以以一种标准的方法、方便地访问数据库资源 JDBC 为访问不同的数据库提供了一种统一的途径，为开发者屏蔽了一些细节问题 JDBC的目标是使Java程序员使用 JDBC 可以连接任何提供了 JDBC 驱动程序的数据库系统，使得程序员无需对特定的数据库系统的特点做过多的了解，以简化和加快开发过程   JDBC 体系结构 JDBC接口(API)包含两个层次：
 面向应用的API：Java API，抽象接口，供应用程序开发人员使用(连接数据库，执行SQL语句，获得结果) 面向数据库的API：Java Driver API，供开发商开发数据库驱动程序用  JDBC是 sun 公司提供的一套用于数据库操作的接口，程序员只需面向此接口编程即可，不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现集合，即为不同数据库的驱动
JDBC 程序的编写过程 补充：ODBC(Open DataBase Connectivity,开放式数据库连接)，是微软在 Windows 平台推出的。使用者在程序中只需调用 ODBC API，由 ODBC 驱动程序将调用转换为对特定的数据库的调用请求
 获取数据库连接 要素一： Driver 接口实现类 Driver接口介绍 java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口 在程序中不需要直接去访问实现 Driver 接口的实现类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现
加载与注册驱动 加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</description>
    </item>
    
    <item>
      <title>事务处理、Druid连接池和DBuitl</title>
      <link>http://example.org/posts/jdbc3/</link>
      <pubDate>Sat, 18 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>http://example.org/posts/jdbc3/</guid>
      <description>数据库事务 数据库事务介绍  事务：一组逻辑操作单元，使数据从一种状态变换到另一种状态 一组逻辑单元：一个或多个 DML 操作 事务处理：保证所有事务都作为一个工作单元来执行，即是出现了故障，都不能改变这种执行方式。当一个事务中执行多个操作时，要么所有的事务都被提交(commit),那么这些修改就永久的保存下来；要么数据库管控系统将放弃所作的所有修改，整个事务**回滚(rollback)**到最初状态，数据一旦提交，就不可回滚 自动提交操作：DDL 操作、DML(可设置取消自动提交)、关闭连接时 为确保数据库中数据的一致性，数据的操作应当是离散的成组的逻辑单元；当它全部完成时，数据的一致性可以保存，而这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点的操作应当全部回退到开始状态  JDBC 事务处理 获取到数据库连接后设置关闭自动提交，在所有 sql 都正常执行就提交，否则回滚
例： 事务的 ACID 属性 原子性(Atomicity): 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生
一致性(Consistency): 事务必须使数据库从一个一致性状态变换到另一个一致性状态
隔离性(Isolation): 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰
持久性(Durability): 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响
 数据库的并发问题 脏读：对于两个事务 T1、T2，T1 读取了已经被 T2 更新但还没有被提交的字段。之后若 T2 回滚，T1 读取的内容就是临时且无效的
不可重复读：对于两个事务 T1、T2，T1 读取了一个字段，然后 T2 更新了该字段。之后 T1 再次读取同一个字段，值就不同了
幻读：对于两个事务 T1、T2，T1 从表中读取了一个字段，然后 T2 在该表中插入了一些新的行。之后如果 T1 再次对其同一个表，就会多出几行
数据库事务的隔离性：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会互相影响，避免各个并发问题
 数据库的隔离级别 一个事务与其他事务隔离程度称为隔离级别。数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性越好，但并发性越弱
四种隔离级别 Oracle 支持的两种事务隔离级别：READ COMMITED(默认)、SERIALIZABLE
MySQL 支持以上四种 默认为： REPEATABLE READ
 设置隔离级别 使用 getTransactionIsolation() 获取数据库隔离级别 使用 setTransactionIsolation() 设置数据库隔离级别</description>
    </item>
    
    <item>
      <title>使用PerparedStatement实现CRUD操作</title>
      <link>http://example.org/posts/jdbc2/</link>
      <pubDate>Sat, 18 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>http://example.org/posts/jdbc2/</guid>
      <description>使用PerparedStatement实现CRUD操作 操作和访问数据库 数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个 Socket 连接
在java.sql包中有三个接口分别定义了对数据库的调用的不同方式
 Statement：用于执行静态 SQL 语句并返回它所生成结果的对象 PrepatedStatement：SQL 语句被预编译并储存在此对象中，可以使用此对象多次高效的执行该语句 CallableStatement：用于执行 SQL 存储过程  使用 Statement 操作数据表的弊端 通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回结果；
Statement 接口定义了下列方法用于执行 SQL 语句
 int excuteUpdate(String sql) ：执行更新操作 INSERT、UPDATE、DELETE ResultSet executeQuery(String sql)：执行查询操作 SELECT  但是使用Statement操作数据表存在弊端
 存在拼串操作，繁琐 存在 SQL 注入问题  SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令，从而利用系统的 SQL 引擎完成恶意注入行为的做法
对于Java而言，要防范SQL注入，只要用PreparedStatement(从Statement扩展而来)取代Statement即可
PreparedStatement 的使用 在使用 PreparedStatement 之前，需要先获取数据库连接，然后再预编译 sql 语句，获得 PreparedStatement 实例，如果有使用占位符，再填充占位符，然后执行操作，最后关闭资源。
以插入为例：  封装数据库的连接和关闭操作 对于需要重复使用的连接和关闭操作可以将其进行封装</description>
    </item>
    
  </channel>
</rss>
