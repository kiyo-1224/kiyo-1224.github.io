<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 忆遇惜·真白 的个人博客</title>
    <link>https://kiyo-1224/kiyo-1224.github.io/posts/</link>
    <description>Recent content in Posts on 忆遇惜·真白 的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jun 2022 01:10:00 +0800</lastBuildDate><atom:link href="https://kiyo-1224/kiyo-1224.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;指针基础</title>
      <link>https://kiyo-1224/kiyo-1224.github.io/posts/c&#43;&#43;pointbase/</link>
      <pubDate>Fri, 10 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224/kiyo-1224.github.io/posts/c&#43;&#43;pointbase/</guid>
      <description>指针 指针的基本内容 指针本身是一个变量，其储存值的地址，而不是值。因此我们使用 *操作符声明一个指针变量，使用地址操作符 (&amp;amp;) 来获取常规变量的地址。 例：
 int i = 10; int *point = &amp;amp;i; int j = *point;
 其中 &amp;amp;i 是 i 的地址值，指针名 point 表示地址 可以使用 * (解除引用操作符) 来获取该地址处储存的值，但需要注意的是在对一个指针使用解除引用操作符前，该指针一定要被初始化为一个确定的地址值。
我们可以将常规变量想象为一个硬币，一面为值，另一面为地址。值为指定量而地址为派生量
内存的动态开辟与释放 new 关键字 对于指针，C++ 通过指针实现重要的 OOP 技术——在程序运行时分配内存 指针可以在运行阶段分配未命名的内存以存储值，在这种情况下只能使用指针来访问内存。 在C++ 中使用 new 关键字分配内存，new 将找到一个长度正确的内存块，并返回该内存块的地址，我们需要将该地址赋予一个指针
 int *prts = new int;
 由于 prts 指向的内存空间没有名字，我们说 prts 指向一个数据对象，此对象并不是面向对象中的对象，它指的是为数据项分配的内存块。变量是一个数据对象，但 prts 指向的内存并不是一个变量
delete 关键字 每次一个 new 开辟一个内存空间都会消耗内存，如果不对内存进行释放，内存一旦消耗殆尽，计算机将无法满足 new 请求，此时 new 将返回 0。对于值为 0 的指针我们称作为空指针，C++ 确保空指针不会指向一个有效的数据</description>
    </item>
    
    <item>
      <title>IOC容器</title>
      <link>https://kiyo-1224/kiyo-1224.github.io/posts/ioc/</link>
      <pubDate>Fri, 10 Jun 2022 01:10:00 +0800</pubDate>
      
      <guid>https://kiyo-1224/kiyo-1224.github.io/posts/ioc/</guid>
      <description>IOC的概念 IOC(控制反转)，把对象创建和对象之间的调用过程，交给Spring进行管理，其目的为降低耦合度
IOC底层使用：xml解析、工厂模式、反射
 IOC接口(BeanFactory) Spring 提供IOC容器实现方式有两种：
 BeanFactory：IOC容器基本实现，是spring内部使用的接口，加载配置文件时不会创建对象，在获取对象才去创建 ApplicationContext：BeanFactory接口的子接口，提供更多的功能，加载文件时就会创建对象  ApplicationContext实现类：
 FileSystemXmlApplicationContext :读取文件绝对路径 ClassPathXmlApplicationContext	:读取文件类路径  通常使用 ApplicationContext 接口来获取配置文件 例：
 ApplicationContext context =
new ClassPathXmlApplicationContext(&amp;ldquo;bean.xml&amp;rdquo;);
  IOC操作Bean管理(基于xml) Bean管理指的是两个操作：1.Spring创建对象 2.Spring注入属性
 1.基于xml配置文件实现 在Spring配置文件中使用bean标签，标签里添加对应属性，就可以实现对象创建
bean标签常用属性
 id 属性：唯一标识 class 属性：类全路径   &amp;lt;bean id=&amp;ldquo;user&amp;rdquo; class=&amp;ldquo;pojo.user&amp;rdquo;&amp;gt; &amp;lt;/bean&amp;gt;
 创建对象时，默认执行无参构造方法完成对象的创建
使用 getBean 方法获取对象，其形参列表为(id值，类)
 User user = context.getBean(&amp;ldquo;user&amp;rdquo;,User.class)
  2.基于xml注入属性 DI：依赖注入，即注入属性
 name 填入属性名 使用set方法注入，在&amp;lt;bean&amp;gt;标签中使用&amp;lt;property&amp;gt;，配置属性注入 使用有参构造方法注入,在&amp;lt;bean&amp;gt;标签中使用&amp;lt;constructor-arg&amp;gt;，配置属性注入  set 方法注入</description>
    </item>
    
    <item>
      <title>this Blog Web</title>
      <link>https://kiyo-1224/kiyo-1224.github.io/posts/me/</link>
      <pubDate>Wed, 01 Jun 2022 01:07:00 +0800</pubDate>
      
      <guid>https://kiyo-1224/kiyo-1224.github.io/posts/me/</guid>
      <description>关于此博客 此博客将用于上传我的个人技术博客以及绘画的作品</description>
    </item>
    
    <item>
      <title>hugo博客的搭建</title>
      <link>https://kiyo-1224/kiyo-1224.github.io/posts/newhugopage/</link>
      <pubDate>Wed, 01 Jun 2022 00:17:00 +0800</pubDate>
      
      <guid>https://kiyo-1224/kiyo-1224.github.io/posts/newhugopage/</guid>
      <description>Welcom  Welcom to iyu_mashiro&amp;rsquo;s Blog感谢您花费宝贵的时间前来阅读我的第一篇博客，这篇博客是我在搭建好博客之后，对于搭建个人博客所做的记录，希望能帮助到您,如果文章内容有错误，请发送邮件至：iyu_mashiro@163.com 我将不胜感激
前言  此篇博客为我的第一篇博客，原本只耗费了一个小时便完成了博客的基本搭建，但因后续对主题设置的不满，便对主题进行了修改导致后续出现了一系列的问题，使得我最终花费了六个小时才完善博客的搭建
初次搭建个人博客 使用 Hugo+github 部署的方案 通过 Hugo 可以快速搭建静态网站,然后将其部署到GitHub上，使其可以在公网访问到
搭建流程 0.前置 在搭建博客之前需要先完成 git 安装与配置，并且设置好用户名和电子邮件，否则后续的步骤将无法进行
1. Hugo文件下载 在使用 hugo 之前，需要先在 Hugo 官网下载 hugo.exe 文件 地址为： https://www.gohugo.org/
2. Hugo 环境变量配置 下载完成之后，需要对环境变量进行配置，否则将无法识别 hugo指令，只需将 hugo.exe 路径加入 path 中即可完成环境变量的配置
 win10 右键此电脑 -&amp;gt; 属性 -&amp;gt; 高级系统设置 -&amp;gt; 环境变量 -&amp;gt; 系统变量 -&amp;gt; path -&amp;gt; 添加即可
 3.生成站点 使用 Hugo 快速生成站点
 hugo new site path //path 为站点生成的路径 cd path //进入目录</description>
    </item>
    
    <item>
      <title>hugo博客的更新</title>
      <link>https://kiyo-1224/kiyo-1224.github.io/posts/addblogcontent/</link>
      <pubDate>Wed, 01 Jun 2022 00:17:00 +0800</pubDate>
      
      <guid>https://kiyo-1224/kiyo-1224.github.io/posts/addblogcontent/</guid>
      <description>博客的更新 在更新了博客的内容之后，我们需要对远端也进行一次更新操作
0.预览博客的更新内容 在博客根目录下，使用命令对更新的内容进行预览
 hugo server --theme=你的主题名 --buildDrafts
 确定无误后开始更新操作
1.初始化博客，更新public目录 在博客根目录下，使用 hugo 命令即可初始化博客并更新public目录
 hugo
hugo --theme=你的主题名 --baseUrl=&amp;ldquo;url&amp;rdquo; //url为之前创建的仓库名 --buildDrafts
 2.提交并更新 首先需要进入 public 目录下 然后执行更新和提交操作
 cd public
git add -A
git commit -m &amp;ldquo;提交说明&amp;rdquo;
git remote set-url origin https://token @github.com/GitHub用户名/仓库名.git
git push -f origin master
 至此即可完成更新操作</description>
    </item>
    
  </channel>
</rss>
